@using System.Text.RegularExpressions;

<div class="d-flex align-end">
    <MudTextField @bind-Value="_contrasena" Label="@Label" Variant="@Variante" ReadOnly="true" Error="@(!string.IsNullOrWhiteSpace(ErrorPassText))" ErrorText="@ErrorPassText" />
    <MudTooltip Text="La contraseña debe ser compartida con el nuevo usuario">
        <MudIconButton Icon="@Icons.Material.Outlined.Info" />
    </MudTooltip>
</div>


@code {
    [Parameter] public string Label { get; set; } = "Contraseña*";
    [Parameter] public Variant Variante { get; set; } = Variant.Text;
    [Parameter] public string Contrasena { get; set; } = null!;
    [Parameter] public EventCallback<string> ContrasenaChanged { get; set; }
    [Parameter] public string ErrorPassText { get; set; } = string.Empty; // mensaje de error

    // Dependencias
    [Inject] private IAdminsService _adminsService { get; set; } = null!;

    // Variables
    private string _contrasena {
        get => Contrasena;
        set {
            if (value == Contrasena) return;
            Contrasena = value;
            ContrasenaChanged.InvokeAsync(Contrasena);
        }
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        // Creamos contraseña aleatoria de forma asincrona
        _contrasena = await _adminsService.GenerarContraseñaAleatoria();
    }
}
