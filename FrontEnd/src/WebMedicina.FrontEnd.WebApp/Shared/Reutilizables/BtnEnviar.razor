<div class="text">
    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">
        @if (Enviando) {
            <MudText Class="d-flex align-center">
                @TextoEnviando
                @IconoCarga
            </MudText>
        } else {
            <MudText Class="d-flex align-center">
                @TextoDefault
                <MudIcon Icon="@IconoDefault" Size="TamanoIconoDefult" />
            </MudText>
        } 
    </MudButton>
</div>

@code{
    // PARAMETROS
    [Parameter] public bool Enviando { get; set; } = false;
    [Parameter] public string TextoDefault { get; set; } = "Enviar";
    [Parameter] public string TextoEnviando { get; set; } = "Enviando";
    [Parameter] public Size TamanoIconoDefult { get; set; } = Size.Medium;
    [Parameter] public string IconoDefault { get; set; } = @Icons.Material.Filled.Send;
    [Parameter] public bool CircularProgress { get; set; } = false;

    // Icono de carga
    private RenderFragment IconoCarga { get; set; } = null!;

    /// <summary>
    /// Renderizamos el componente de carga
    /// </summary>
    protected override void OnInitialized() {
        base.OnInitialized();

        IconoCarga = builder =>
        {;
            if(CircularProgress) {
                builder.OpenComponent<MudProgressCircular>(0);
                builder.AddAttribute(1, "Size", Size.Small);
                builder.AddAttribute(2, "Indeterminate", true);
                builder.AddAttribute(3, "class", "ml-3");
                builder.CloseComponent();
            } else {
                builder.OpenElement(0 , "div");
                builder.AddAttribute(1, "class", "loader ml-2");
                builder.CloseElement();
            }
        };
    }

}