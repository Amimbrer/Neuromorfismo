@inherits LayoutComponentBase
<MudThemeProvider Theme="_themeManager.Theme"  />
<MudDialogProvider />
<MudSnackbarProvider />
    
<MudLayout>
    <div>

    <MudAppBar class="white mud-elevation-25" Elevation="_themeManager.AppBarElevation">
             <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Dark" Edge="Edge.Start" OnClick="@ToggleDrawer" />
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
                <a id="iconoNavBar" href="">
                    <img id="iconoNavBar" src="icono.png" alt="Icono" />
                </a>
            </MudHidden>


            <MudSpacer />
        <MudMenu StartIcon="@Icons.Material.Filled.Translate" Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Dark" Size="Size.Large" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight">
            <MudMenuItem Color="Color.Dark" Icon="@Icons.Material.Filled.ManageAccounts">Perfil</MudMenuItem>
            <MudMenuItem Color="Color.Dark" Icon="@Icons.Material.Filled.Password">Contraseña</MudMenuItem>
        </MudMenu>
    </MudAppBar>
    </div>
    <MudDrawer @bind-Open="@open" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation" Breakpoint="@Breakpoint.Lg" Variant="@DrawerVariant.Responsive" PreserveOpenState="true">
            <NavMenu />
    </MudDrawer>

    <MudMainContent Class="cienHeight">
        <MudContainer Fixed="true" Class="cienHeight">
    <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
    <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
@code {
    bool open = true;
    private bool primerClick { get; set; } = true;
    private DrawerClipMode clipMode = DrawerClipMode.Always;


    void ToggleDrawer() {
        if (primerClick) {
            clipMode = DrawerClipMode.Docked;
        } 
        open = !open;
    }



    private  static ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool _themeManagerOpen = false;

    void OpenThemeManager(bool value) {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value) {
        _themeManager = value;
        StateHasChanged();
    }

    protected override void OnInitialized() {
        StateHasChanged();
    }

    MudTheme MyCustomTheme = new MudTheme() {
            Typography = new Typography() {
                Default = new Default() {
                    FontFamily = new[] { _themeManager.FontFamily }
                }
            }
        };
}

