@attribute [Authorize]
@inject EstilosBase estilosBase
@using System.Security.Claims

<div>
<MudNavMenu id="navMenu" Class="pt-3 pt-md-5" Bordered="true" Color="@(_isDarkMode ? Color.Primary : Color.Dark)">
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Store">Estadísticas</MudNavLink>
    <AuthorizeView Roles="admin, superAdmin">
        <Authorized>
            <MudNavGroup Title="Administación" Expanded="false" Icon="@Icons.Material.Outlined.Settings">

                    @if (user is not null && user.IsInRole("superAdmin")) {
                        <MudNavLink Href="/crearUsuario" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Outlined.Add">Alta Usuario</MudNavLink>
                    }
                        <MudNavLink Href="/gestionUsers" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Outlined.Add">Gestión usuarios</MudNavLink>
                    
             </MudNavGroup> 
        </Authorized>
    </AuthorizeView>
    <MudNavLink Href="/pacientes" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Store">Pacientes</MudNavLink>
</MudNavMenu>
</div>
@code
{
    [CascadingParameter(Name = "modoOscuro")]
    private bool _isDarkMode { get; set; }

    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }
    private ClaimsPrincipal? user { get; set; }

    protected override async Task OnInitializedAsync() {
        if (authenticationState is not null) {
            var authState = await authenticationState;
            user =  authState?.User;

        }
    }
}