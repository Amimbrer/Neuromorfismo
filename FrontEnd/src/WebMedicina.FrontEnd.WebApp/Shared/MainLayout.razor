@inherits LayoutComponentBase
@inject EstilosBase estilosBase
@inject IJSRuntime js

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="estilosBase.currentTheme" />
    <MudDialogProvider />
    <MudSnackbarProvider />
<MudSnackbarProvider />
    


<CascadingValue Name="modoOscuro" Value="@_isDarkMode">
    <MudLayout Class="d-flex">
        <AuthorizeView>
            <Authorized>
                <MudAppBar Class="mud-elevation-25">
                    <MudHidden Breakpoint="Breakpoint.SmAndUp">
                        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Dark" Edge="Edge.Start" OnClick="@ToggleDrawer" />
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.MdAndDown">
                        <a href="">
                            <img id="iconoNavBar" src="icono.png" alt="Icono" />
                        </a>
                    </MudHidden>
                    <MudSpacer />

                    @* Boton Modo Oscuro*@
                    <MudToggleIconButton @bind-Toggled="@IsDarkMode" Icon="@Icons.Material.Outlined.DarkMode" Title="Cambiar a modo oscuro"
                                            ToggledIcon="@Icons.Material.Outlined.LightMode" ToggledTitle="Cambiar a modo claro" />

                    @* Perfil  *@
                    <Perfil />
                </MudAppBar>

            @* Drawer solo para autenticados *@
                <MudDrawer @bind-Open="@open" ClipMode="clipMode" Elevation="1" Breakpoint="@Breakpoint.Md" Variant="@DrawerVariant.Responsive" PreserveOpenState="true">
                        <NavMenu />
                </MudDrawer>
                 <MudMainContent Class="cienHeight">
                    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex flex-column relative py-5 py-md-10">
                        @Body
                    </MudContainer>
                </MudMainContent>
            </Authorized>
            <NotAuthorized>
                <MudMainContent id="loginContainer">
                    <MudContainer Fixed="true" Class="d-flex flex-column">
                        @Body
                    </MudContainer>
                </MudMainContent>
            </NotAuthorized>
            <Authorizing>
                <div id="container_loading-progress">
                    <div id="cargaInicio">
                        <div id="spinner" class="@(IsDarkMode ? "spinner2" : "")" ></div>
                        <img src="icono.png" alt="Icono" />
                    </div>
                </div>
            </Authorizing>
        </AuthorizeView>
    </MudLayout>
</CascadingValue>
@code {
    // Depedencias
    [Inject] private IConfiguration configuration { get; set; } = null!;


    // Control del drawer pricnipal
    private bool open { get; set; } = true;
    private bool primerClick = true;
    private DrawerClipMode clipMode = DrawerClipMode.Always;

    // Control de modo oscuro
    private MudThemeProvider _mudThemeProvider = new();
    private bool _isDarkMode = false;
    private bool IsDarkMode {
        get => _isDarkMode;
        set {
            _isDarkMode = value;
            js.SetInLocalStorage(DarkModeKey, JsonSerializer.Serialize(_isDarkMode));
        }
    }
    private string DarkModeKey { get; set; } = string.Empty; // modo oscuro en sessionStorage

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        DarkModeKey = configuration.GetSection("DarkModeKey").Value ?? "darkmode";

        var modoOscuro = await js.GetFromLocalStorage(DarkModeKey);
        bool boolModo = false;
        if (modoOscuro is not null) {
            boolModo = JsonSerializer.Deserialize<bool>(modoOscuro);
        }
        if (modoOscuro is null) {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await js.SetInLocalStorage(DarkModeKey, JsonSerializer.Serialize(_isDarkMode));
        } else {
            _isDarkMode = boolModo;
        }
    }

    void ToggleDrawer() {
        if (primerClick) {
            clipMode = DrawerClipMode.Docked;
        } 
        open = !open;
    }

}

