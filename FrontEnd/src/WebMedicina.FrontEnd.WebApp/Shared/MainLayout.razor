@inherits LayoutComponentBase
@inject EstilosBase estilosBase
@inject ExcepcionDto excepcionPersonalizada
@inject IJSRuntime js


<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="estilosBase.currentTheme" />
    <MudDialogProvider />
<MudSnackbarProvider />
    


<CascadingValue Value="@_isDarkMode">
<MudLayout Class="d-flex">
    <MudAppBar Class="mud-elevation-25">
             <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Dark" Edge="Edge.Start" OnClick="@ToggleDrawer" />
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
                <a id="iconoNavBar" href="">
                    <img id="iconoNavBar" src="icono.png" alt="Icono" />
                </a>
            </MudHidden>


            <MudSpacer />

            @* Boton Modo Oscuro*@
            <MudToggleIconButton @bind-Toggled="@IsDarkMode"
                     Icon="@iconoInicial" Title="@modoInicial"
                     ToggledIcon="@iconoSecundario" ToggledTitle="@modoSecundario"/>
    
         <AuthorizeView>
            <Authorized>
                <MudMenu Icon="@Icons.Material.Outlined.AccountCircle" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight">
                    <MudMenuItem Color="Color.Dark" Icon="@Icons.Material.Filled.ManageAccounts">Perfil</MudMenuItem>
                    <MudMenuItem Color="Color.Dark" Icon="@Icons.Material.Filled.Password">Contraseña</MudMenuItem>
                </MudMenu>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>

    @* Drawe solo para autenticados *@
     <AuthorizeView>
        <Authorized>
            <MudDrawer @bind-Open="@open" ClipMode="clipMode" Elevation="1" Breakpoint="@Breakpoint.Lg" Variant="@DrawerVariant.Responsive" PreserveOpenState="true">
                    <NavMenu />
            </MudDrawer>
        </Authorized>
    </AuthorizeView>

    <MudMainContent Class="cienHeight">
        <MudContainer Fixed="true" Class="cienHeight">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
</CascadingValue>
@code {
    bool open = true;
    private bool primerClick = true;
    private DrawerClipMode clipMode = DrawerClipMode.Always;


    private MudThemeProvider _mudThemeProvider;
    private bool _isDarkMode = false;
    private bool IsDarkMode { get => _isDarkMode; set{
            _isDarkMode = value;
            js.SetInLocalStorage(CLAVE, JsonSerializer.Serialize(_isDarkMode));
        }
    }

    private string iconoInicial { get; set; }
    private string iconoSecundario { get; set; } 
    private string modoInicial { get; set; }
    private string modoSecundario { get; set; }
    private const string CLAVE = "KoAuNLWIWUEfVdUtDYsT";


    protected override async Task OnAfterRenderAsync(bool firstRender) {
        try {
            if (firstRender) {
                var modoOscuro = await js.GetFromLocalStorage(CLAVE);
                bool boolModo = false;
                if(modoOscuro is not null) {
                    boolModo = JsonSerializer.Deserialize<bool>(modoOscuro);
                }
                if (modoOscuro is null) {
                    _isDarkMode = await _mudThemeProvider.GetSystemPreference();
                    await js.SetInLocalStorage(CLAVE, JsonSerializer.Serialize(_isDarkMode));
                }else {
                    _isDarkMode = boolModo;
                }
                // Colocamos como principal el icono del modo del usuario
                if (_isDarkMode == true) {
                    iconoInicial = @Icons.Material.Outlined.DarkMode;
                    iconoSecundario = @Icons.Material.Outlined.LightMode;
                    modoInicial = "Modo oscuro";
                    modoSecundario = "Modo claro";
                } else {
                    iconoInicial = @Icons.Material.Outlined.LightMode;
                    iconoSecundario = @Icons.Material.Outlined.DarkMode;
                    modoInicial = "Modo claro";
                    modoSecundario = "Modo oscuro";
                }
                StateHasChanged();
            }
        } catch (Exception ex) {
            excepcionPersonalizada.ConstruirPintarExcepcion(ex);
        }
    }

    void ToggleDrawer() {
        if (primerClick) {
            clipMode = DrawerClipMode.Docked;
        } 
        open = !open;
    }
}

