@inherits LayoutComponentBase
@inject EstilosBase estilosBase
@inject ExcepcionDto excepcionPersonalizada
@inject IJSRuntime js
@inject ExcepcionDto _excepcionPersonalizada


<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="estilosBase.currentTheme" />
    <MudDialogProvider />
<MudSnackbarProvider />
    


<CascadingValue Name="modoOscuro" Value="@_isDarkMode">
<CascadingValue Name="excepcionPersonalizada" Value="@_excepcionPersonalizada">
    <MudLayout Class="d-flex">
        <MudAppBar Class="mud-elevation-25">
            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Dark" Edge="Edge.Start" OnClick="@ToggleDrawer" />
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                <a href="">
                    <img id="iconoNavBar" src="icono.png" alt="Icono" />
                </a>
            </MudHidden>
            <MudSpacer />

            @* Boton Modo Oscuro*@
            <MudToggleIconButton @bind-Toggled="@IsDarkMode" Icon="@Icons.Material.Outlined.DarkMode" Title="Cambiar a modo oscuro"
                                    ToggledIcon="@Icons.Material.Outlined.LightMode" ToggledTitle="Cambiar a modo claro" />
            @* Perfil Cambiar contraseña solo para autenticados *@
            <AuthorizeView>
                <Authorized>
                    <MudMenu Icon="@Icons.Material.Outlined.AccountCircle" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight">
                        <MudMenuItem Color="Color.Dark" Icon="@Icons.Material.Filled.ManageAccounts">Perfil</MudMenuItem>
                        <MudMenuItem Color="Color.Dark" Icon="@Icons.Material.Filled.Password">Contraseña</MudMenuItem>
                    </MudMenu>
                </Authorized>
            </AuthorizeView>
        </MudAppBar>

        @* Drawer solo para autenticados *@
         <AuthorizeView>
            <Authorized>
                <MudDrawer @bind-Open="@open" ClipMode="clipMode" Elevation="1" Breakpoint="@Breakpoint.Md" Variant="@DrawerVariant.Responsive" PreserveOpenState="true">
                        <NavMenu />
                </MudDrawer>
            </Authorized>
        </AuthorizeView>

        <MudMainContent Class="cienHeight">
                <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex flex-column">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</CascadingValue>
</CascadingValue>
@code {
    // Control del drawer pricnipal
    bool open { get; set; } = true;
    private bool primerClick = true;
    private DrawerClipMode clipMode = DrawerClipMode.Always;

    // Control de modo oscuro
    private MudThemeProvider _mudThemeProvider;
    private bool _isDarkMode = false;
    private bool IsDarkMode { 
        get => _isDarkMode; 
        set{
            _isDarkMode = value;
            js.SetInLocalStorage(CLAVE, JsonSerializer.Serialize(_isDarkMode));
        }
    }

    private const string CLAVE = "KoAuNLWIWUEfVdUtDYsT"; // modo oscuro en sessionStorage

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        try {
            if (firstRender) {
                var modoOscuro = await js.GetFromLocalStorage(CLAVE);
                bool boolModo = false;
                if(modoOscuro is not null) {
                    boolModo = JsonSerializer.Deserialize<bool>(modoOscuro);
                }
                if (modoOscuro is null) {
                    _isDarkMode = await _mudThemeProvider.GetSystemPreference();
                    await js.SetInLocalStorage(CLAVE, JsonSerializer.Serialize(_isDarkMode));
                }else {
                    _isDarkMode = boolModo;
                }
            }
        } catch (Exception ex) {
            excepcionPersonalizada.ConstruirPintarExcepcion(ex);
        }
    }

    void ToggleDrawer() {
        if (primerClick) {
            clipMode = DrawerClipMode.Docked;
        } 
        open = !open;
    }
}

