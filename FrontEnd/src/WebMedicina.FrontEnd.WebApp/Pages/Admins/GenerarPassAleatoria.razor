@using System.Text.RegularExpressions;
<div class="d-flex align-end">
    <MudTextField Value="Contrasena" ValueChanged="ContrasenaChanged" Label="@Label" Variant="@Variante" ReadOnly Validation="new Func<string, IEnumerable<string>>(ValidarContrasena)" />
    <MudTooltip Text="La contraseña debe ser compartida con el nuevo usuario">
        <MudIconButton Icon="@Icons.Material.Outlined.Info" />
    </MudTooltip>
</div>


 @code {
    [Parameter] public string Label { get; set; } = "Contraseña*";
    [Parameter] public Variant Variante { get; set; } = Variant.Text;
    [Parameter] public string Contrasena { get; set; } = default!;
    [Parameter] public EventCallback<string> ContrasenaChanged { get; set; }

    // Dependencias
    [Inject] private IAdminsService _adminsService { get; set; } = null!;


    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        // Creamos contraseña aleatoria de forma asincrona
        Contrasena = await _adminsService.GenerarContraseñaAleatoria();

    }

    protected override void OnAfterRender(bool firstRender) {
        base.OnAfterRender(firstRender);
    }

    // Validar ontraseña
    private IEnumerable<string> ValidarContrasena(string pw) {
        if (!Regex.IsMatch(pw, @"^(?=.*\d)(?=.*[!@#$%^&*()_+])(?=.*[A-Z])(?=.*[a-z])\S{8,16}$")) {
            yield return "La contraseña debe tener al entre 8 y 16 caracteres, al menos un dígito, al menos una minúscula, al menos una mayúscula y al menos un caracter especial";
        }
    }
}
