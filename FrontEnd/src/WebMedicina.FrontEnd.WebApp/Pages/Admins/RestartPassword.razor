@using WebMedicina.Shared.Dto.UserAccount;
@using WebMedicina.Shared.Dto.Usuarios;
@attribute [Authorize(Roles = "superAdmin")]

<PageTitle>Reestablece Contraseña</PageTitle>
@page "/passrestart"

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex flex-grow-1 align-center">
    <MudPaper Elevation="3" Class="rounded-lg pa-7 flex-1">
        <h1 class="mb-5">Alta Nuevo Usuario</h1>

        <MudText Align="Align.Justify" ></MudText>

        @* Filtrado por medico *@
        <EditForm Model="@restartPass" OnValidSubmit="ResetarPass" class="flex-grow-1">
            <DataAnnotationsValidator />

            <MudAutocomplete T="UserUploadDto" Label="Médicos" @bind-Value="@restartPass.Medico" For="@(() => restartPass.Medico)" SearchFunc="@BuscarMedPac" ResetValueOnEmptyText="true" CoerceValue="true"
                                ShowProgressIndicator="true" Clearable="true" ToStringFunc="@(q => q == null ? null : $"{q.UserLogin} - {q.Nombre} {q.Apellidos}")">
                <NoItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        No se han encontrado médicos
                    </MudText>
                </NoItemsTemplate>
            </MudAutocomplete>
            <GenerarPassAleatoria @bind-Contrasena="restartPass.Password" />
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    // DEPENDENCIAS
    [Inject] private IAdminsService _adminService { get; set; } = null!;

    // PROPIEDADES
    RestartPasswordDto restartPass = new();
    // Lista de medicos para filtrar
    private IEnumerable<UserUploadDto>? ListaMedicos { get; set; } = null;

    private async Task ResetarPass() {

    }

    /// <summary>
    /// Buscador para autocomplete de medicos
    /// </summary>
    /// <param name="busqueda"></param>
    /// <returns></returns>
    private async Task<IEnumerable<UserUploadDto>> BuscarMedPac(string? busqueda) {
        // Si la lista es null se obtiene por primera vez de BD
        ListaMedicos ??= await _adminService.ObtenerAllMedicos();

        // Si hay medicos en la lista se realiza la busqueda
        if (!string.IsNullOrWhiteSpace(busqueda) && ListaMedicos != null && ListaMedicos.Any()) {
            return ListaMedicos.Where(q => ($"{q.UserLogin} {q.Nombre} {q.Apellidos}").Contains(busqueda, StringComparison.OrdinalIgnoreCase));
        }

        return ListaMedicos ?? Enumerable.Empty<UserUploadDto>();
    }
}
